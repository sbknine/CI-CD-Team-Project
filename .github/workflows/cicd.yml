# This workflow will do a clean install of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: CI/CD CS360 Final Project

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  Continuos_Integration:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - name: npm install
      run: npm i
    - name: npm install for frontend
      working-directory: ./frontend
      run: npm i
    #- name: Data import to mongoDB
    #  run: npm run data:import
      
    #- run: npm run build --if-present
    - run: npm test
    
    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Build and push to DockerHub
      if: success()
      uses: docker/build-push-action@v2
      with:
        push: true
        tags: sbknine/cs360_final-project:latest

  Continuos_Deployment:
    needs: [Continuos_Integration]
    if: ${{ always() && contains(needs.*.result, 'success') && !(contains(needs.*.result, 'failure')) }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Configure AWS credentials
      if: success()
      
      uses: aws-actions/configure-aws-credentials@13d241b293754004c80624b5567555c4a39ffbe3
      with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}
 
    - name: Create EC2 and deploy application to EC2
      if: success()
      env: 
          KEY_PAIR_NAME: ${{ secrets.AWS_KEYPAIR_NAME }}
          SECGROUP_ID: ${{ secrets.AWS_SECGROUP_ID }}
      run: aws ec2 run-instances --image-id  ami-0ed9277fb7eb570c9 --instance-type t2.micro  --key-name $KEY_PAIR_NAME --security-group-ids $SECGROUP_ID --user-data file://script/user_data_script.txt 
